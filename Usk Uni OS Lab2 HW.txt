#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <semaphore.h>
#define n 10
#define Allocated 1
#define UnAllocated 0
#define READY 1
#define BLOCKED 0

typedef struct pcb
{

  int id;
  int priority;
  struct pcb *next;
  struct pcb *prev;
  int state;
  int alloc;
  int type;

} pcb_t;

typedef struct queue
{

  pcb_t *front;

  pcb_t *rear;

  pcb_t *pcb_table[n];

  int state;

} que_t;


que_t
init_queue (que_t * qq)
{

  qq->front = NULL;

  qq->rear = NULL;

  return *qq;

};



pcb_t
init_pcb (pcb_t * pp)
{

  pp->id = rand () % 10 + 1;

  pp->priority = rand () % 5 + 1;

  return *pp;

};



void
print_list (pcb_t * head)
{

  pcb_t *current = head;

  while (current != NULL)

    {

      printf ("%d\n", current->id);

      current = current->next;

    }

};


void
enqueue (pcb_t * pp, que_t * qq)
{

  if (qq->front == NULL && qq->rear == NULL)

    {

      qq->rear = pp;

      qq->front = pp;

      pp->next = NULL;

    }

  else

    {

      qq->rear->next = pp;

      qq->rear = pp;

      pp->next = NULL;

    }


};



void
dequeue (que_t * qq)
{

  if (qq->front == NULL && qq->rear == NULL)

    {

      printf ("Queue is Empty\n");

    }

  else

    {

      pcb_t *temp = qq->front;

      qq->front = qq->front->next;

      printf ("Removed item is: %d\n", temp->id);

    }

}

int
isFull (que_t * qq)
{

  int full = 0;

  if (qq->rear->priority == n - 1)

    {

      full = 1;

    }

  return full;

}


int
isEmpty (que_t * qq)
{

  int empty = 0;

  if (qq->front == qq->rear + 1)

    {

      empty = 1;

    }

  return empty;

}


void insert(pcb_t *pp, que_t *qq) {
        que_t check;
        check.state = qq->state;
        check.front = qq->front;
        check.rear = qq->front;

        if (qq->front == NULL && qq->rear == NULL) {
                enqueue(pp, qq);
        }
        else if (qq->rear->priority < pp->priority) {
                enqueue(pp, qq);
        }
        else if (qq->front->priority > pp->priority) {
                qq->front = pp;
                pp->next = check.front;
                printf("%d added to queue.\n", pp->id);
        }
        else if (qq->front->priority < pp->priority) {
                while (check.front->priority < pp->priority && check.front->next != NULL) {
                        check.front = check.front->next;
                }
                while (check.rear->next != check.front) {

                        check.rear = check.rear->next;
                }
                check.rear->next = pp;
                if (check.front == NULL) {
                        pp->next = NULL;
                }
                else {
                        pp->next = check.front;
                        printf("%d added to queue.\n", pp->id);
                }
        }
        else {
                printf("Error!");
        }
}


void delete(pcb_t *pp, que_t *qq) {
        pcb_t *temp = qq->front;
        if (qq->front == NULL && qq->rear == NULL) {
                printf("Queue is Empty!");
        }
        else if (pp->id == qq->front->id) {
                dequeue(qq);
        }
        else if (pp->id == qq->rear->id) {
                while (temp->next->next != NULL) {
                        temp = temp->next;
                }
                temp->next = NULL;
                qq->rear = temp;
        }
        else {
                while (pp->id != temp->next->id) {
                        temp = temp->next;
                }
                temp->next = temp->next->next;
        }
}


void
Print (que_t * qq)
{

  pcb_t *pp;

  printf ("Print: ");

  for (pp = qq->front; pp != 0; pp = pp->next)

    {

      printf ("%d ", pp->id);

    }

  putchar ('\n');

}

sem_t mutex;
pcb_t pcb_table[n];
que_t queue;

void fcfsFunction(int i) 
{
    pcb_t Array[10];
    pcb_t pp=init_pcb(&pp);
    pp.id=i;
    pcb_table[i]=pp;
    enqueue(&pcb_table[i], &queue);
    printf("FCFS Queue");
    Print(&queue);
} 
void pbFunction(int i) 
{ 
    printf("check_in for pb process %i\n",i);
    pcb_t Array[10];
    pcb_t pp=init_pcb(&pp);
    pp.id=i;
    pp.priority=pcb_table[i].priority;
    pcb_table[i]=pp;
    insert(&pcb_table[i], &queue);
     printf("Priority Based Queue");
    Print(&queue);
} 

void *scheduler(void *num)

{
    sem_wait(&mutex);
    /* Critical Section */
    /* Logic Goes Here */
    int id = *(int *)num;
    int type = pcb_table[id].type;
    printf("type is %d\n",type);
    
/*int i; pcb_t* pt;
for(i=0; i<n; i++) {
    pt=&pcb_table[i];
    if(pt->alloc != Allocated) {
        printf('am i getting exec!?');
        pthread_create(&pcb_table[i], NULL,scheduler, (void *) &pcb_table[i]);
        break;
    }
}*/
        
    if(type==0) {
    printf("ID = 0 , TYPE is FCFS\n");
    fcfsFunction(id);
    } else if (type==1) {
    printf("ID = 1 , TYPE is Priorty\n");
    pbFunction(id);
    } else {
        printf("There is no such type!\n");
    }    
    
    /* Logic Ends Here */
    /* End Of Critical Section*/
    sem_post(&mutex);
}

void block(int pid) {
    pcb_table[pid].state = BLOCKED;
    printf("%d is BLOCKED\n",pid);
    /* scheduler((void *)&pid+1); */
}

void unblock(int pid) {
    pcb_table[pid].state = READY;
    printf('%d is READY\n',pid);
}

int make_proc(int address , int type , int prio) {
    int id = address;
    int value = type;
    pthread_t threads[n];
    pcb_table[id].id = value;
    pcb_table[id].priority = prio;
    pcb_table[id].alloc = Allocated;
    pcb_table[id].type = type;
    
    
    printf("hello process %i\n",address);
    pthread_create(&threads[id], NULL,scheduler, (void *)&address);
    pthread_join(threads[id], NULL);
    printf("good bye process %i!\n",address);
}

int
main ()
{
    sem_init(&mutex, 0, n); 
    
    make_proc(0,1,1);
    make_proc(1,0,0);
    make_proc(2,1,0);
    make_proc(3,0,2);
    
    
    return 0;
}
